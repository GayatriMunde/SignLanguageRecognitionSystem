{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "if not os.path.exists(\"data1\"):\n",
    "    os.makedirs(\"data1\")\n",
    "    os.makedirs(\"data1/train\")\n",
    "    os.makedirs(\"data1/test\")\n",
    "    os.makedirs(\"data1/train/a\")\n",
    "    os.makedirs(\"data1/train/b\")\n",
    "    os.makedirs(\"data1/train/c\")\n",
    "    os.makedirs(\"data1/train/d\")\n",
    "    os.makedirs(\"data1/train/e\")\n",
    "    os.makedirs(\"data1/train/f\")\n",
    "    os.makedirs(\"data1/train/g\")\n",
    "    os.makedirs(\"data1/train/h\")\n",
    "    os.makedirs(\"data1/train/i\")\n",
    "    os.makedirs(\"data1/train/j\")\n",
    "    os.makedirs(\"data1/train/j\")\n",
    "    os.makedirs(\"data1/train/k\")\n",
    "    os.makedirs(\"data1/train/l\")\n",
    "    os.makedirs(\"data1/train/m\")\n",
    "    os.makedirs(\"data1/train/n\")\n",
    "    os.makedirs(\"data1/train/o\")\n",
    "    os.makedirs(\"data1/train/p\")\n",
    "    os.makedirs(\"data1/train/q\")\n",
    "    os.makedirs(\"data1/train/r\")\n",
    "    os.makedirs(\"data1/train/s\")\n",
    "    os.makedirs(\"data1/train/t\")\n",
    "    os.makedirs(\"data1/train/u\")\n",
    "    os.makedirs(\"data1/train/v\")\n",
    "    os.makedirs(\"data1/train/w\")\n",
    "    os.makedirs(\"data1/train/x\")\n",
    "    os.makedirs(\"data1/train/y\")\n",
    "    os.makedirs(\"data1/train/z\")\n",
    "    os.makedirs(\"data1/test/k\")\n",
    "    os.makedirs(\"data1/test/l\")\n",
    "    os.makedirs(\"data1/test/m\")\n",
    "    os.makedirs(\"data1/test/n\")\n",
    "    os.makedirs(\"data1/test/o\")\n",
    "    os.makedirs(\"data1/test/p\")\n",
    "    os.makedirs(\"data1/test/q\")\n",
    "    os.makedirs(\"data1/test/r\")\n",
    "    os.makedirs(\"data1/test/s\")\n",
    "    os.makedirs(\"data1/test/t\")\n",
    "    os.makedirs(\"data1/test/u\")\n",
    "    os.makedirs(\"data1/test/v\")\n",
    "    os.makedirs(\"data1/test/w\")\n",
    "    os.makedirs(\"data1/test/x\")\n",
    "    os.makedirs(\"data1/test/y\")\n",
    "    os.makedirs(\"data1/test/z\")\n",
    "    os.makedirs(\"data1/test/a\")\n",
    "    os.makedirs(\"data1/test/b\")\n",
    "    os.makedirs(\"data1/test/c\")\n",
    "    os.makedirs(\"data1/test/d\")\n",
    "    os.makedirs(\"data1/test/e\")\n",
    "    os.makedirs(\"data1/test/f\")\n",
    "    os.makedirs(\"data1/test/g\")\n",
    "    os.makedirs(\"data1/test/h\")\n",
    "    os.makedirs(\"data1/test/i\")\n",
    "    os.makedirs(\"data1/test/j\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train or test \n",
    "mode = 'train'\n",
    "directory = 'data1/'+mode+'/'\n",
    "\n",
    "cap = cv2.VideoCapture(0)\n",
    "j=0\n",
    "abc='a'\n",
    "while (j<26):\n",
    "    count=0\n",
    "    for i in range(0,50):\n",
    "        _, frame = cap.read()\n",
    "        frame = cv2.flip(frame, 1)\n",
    "    # Coordinates of the ROI\n",
    "        x1 = int(0.5*frame.shape[1])\n",
    "        y1 = 10\n",
    "        x2 = frame.shape[1]-10\n",
    "        y2 = int(0.5*frame.shape[1])\n",
    "    # Drawing the ROI\n",
    "   \n",
    "        cv2.rectangle(frame, (x1-1, y1-1), (x2+1, y2+1), (255,0,0) ,1)\n",
    "    # Extracting the ROI\n",
    "        roi = frame[y1:y2, x1:x2]\n",
    "        roi = cv2.resize(roi, (256, 256)) \n",
    " \n",
    "        cv2.imshow(\"Frame\", frame)\n",
    "    \n",
    "   \n",
    "        roi = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)\n",
    "        _, roi = cv2.threshold(roi, 120, 255, cv2.THRESH_BINARY)\n",
    "        cv2.imshow(\"ROI\", roi)\n",
    "        cv2.imwrite(directory+str(j+ord(abc))+'/'+str(i)+'.jpg',roi)\n",
    "        if(cv2.waitKey(5)== ord('q')):\n",
    "            break\n",
    "    \n",
    "    j=j+1\n",
    "    \n",
    "cap.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
